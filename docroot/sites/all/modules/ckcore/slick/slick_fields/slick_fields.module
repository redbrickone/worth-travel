<?php
/**
 * @file
 * Provides fields integration for the Slick carousel.
 */

/**
 * Implements hook_field_formatter_info().
 */
function slick_fields_field_formatter_info() {
  $formatters['slick'] = array(
    'label'       => t('Slick carousel'),
    'field types' => array('image', 'file', 'field_collection'),
    'settings'    => slick_get_fields_default_settings(),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function slick_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if (empty($items) && $display['type'] != 'slick') {
    return $element;
  }

  list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);

  $slick_path = drupal_get_path('module', 'slick');
  $field_name = $field['field_name'];
  $id         = slick_html_id("slick-{$entity_type}-{$entity_id}-{$bundle}-{$field_name}");
  $thumb_id   = $id . '-thumbnail';
  $entity_uri = entity_uri($entity_type, $entity);

  // Prepare settings.
  $settings = array(
    'count'       => count($items),
    'bundle'      => $bundle,
    'field_type'  => $field['type'],
    'field_name'  => $field_name,
    'entity_id'   => $entity_id,
    'entity_type' => $entity_type,
    'entity_uri'  => $entity_uri['path'],
    'id'          => $id,
  ) + slick_get_fields_default_settings();

  $settings = array_merge($settings, $display['settings']);
  $asnavfor = $settings['optionset_thumbnail'];
  $cid      = $instance['id'] . $settings['current_view_mode'] . $settings['image_style'] . $langcode;

  // Sniffs for Views to allow block__no_wrapper, views_view__no_wrapper, etc.
  $view = empty($display['views_view']) ? NULL : $display['views_view'];
  if ($view) {
    $settings['attributes']['class'][] = drupal_clean_css_identifier('slick--view--' . $view->name);
    $settings['attributes']['class'][] = drupal_clean_css_identifier('slick--view--' . $view->name . '--' . $view->current_display);
    $cid .= $view->name . $view->current_display;
    $view = TRUE;
  }

  $settings['cid'] = $cid;
  $settings['nav'] = $asnavfor && isset($items[1]);

  // Renders slicks quickly from cache if any, as render cache is just cache.
  if (!empty($settings['cache']) && $cache = slick_render_cache($settings)) {
    return array(
      '#theme'    => 'slick_wrapper',
      '#items'    => $cache,
      '#settings' => $settings,
    );
  }

  // Otherwise do the routines before a cache stored, or when disabled.
  module_load_include('inc', 'slick', 'includes/slick.fields');
  $build                     = $attach = $js = $array = array();
  $optionset                 = slick_optionset_load($settings['optionset']);
  $attachments               = slick_attach($attach, $settings);
  $settings['lazy']          = isset($items[1]) ? $optionset->options['settings']['lazyLoad'] : '';
  $settings['has_pattern']   = !empty($optionset->options['general']['goodies']['pattern']);
  $settings['slide_caption'] = is_array($settings['slide_caption']) ? array_filter($settings['slide_caption']) : $settings['slide_caption'];
  $settings['box_style']     = $settings['colorbox_style'];

  switch ($field['type']) {
    case 'image':
      module_load_include('inc', 'slick', 'includes/slick.image');
      $build = slick_format_image($items, $langcode, $settings);
      break;

    case 'file':
      module_load_include('inc', 'slick', 'includes/slick.extras');
      module_load_include('inc', 'slick', 'includes/slick.media');
      $build = slick_format_media($items, $langcode, $settings);
      break;

    case 'field_collection':
      module_load_include('inc', 'slick', 'includes/slick.extras');
      module_load_include('inc', 'slick', 'includes/slick.field_collection');
      $build = slick_format_field_collection($items, $langcode, $settings);
      break;
  }

  if (!isset($build['items'])) {
    return $element;
  }
  // Inline CSS is to colorize FC individual slide, or Fullscreen skin.
  if (!empty($settings['inline_css']) && !empty($settings['skin'])) {
    $attachments['css'][] = slick_get_inline_css($settings, $build['items']);
  }

  if ($settings['mousewheel'] && $mousewheel = libraries_get_path('mousewheel')) {
    $js['mousewheel'] = TRUE;
    $attachments['js'] += array($mousewheel . '/jquery.mousewheel.min.js' => array('group' => JS_LIBRARY, 'weight' => -5));
  }

  if ($settings['skin'] && $settings['thumbnail_hover']) {
    $attachments['css'] += array($slick_path . '/css/components/slick.dots--thumbnail.css' => array('weight' => -98));
  }

  if ($settings['nav']) {
    $settings['asnavfor_target'] = "#{$thumb_id}-slider";
  }

  // Build the single/main display Slick.
  $slick[0] = slick_build($build['items'], $js, $settings, $attachments, $id, $optionset);

  if ($settings['nav'] && isset($build['thumb'])) {
    $optionset = slick_optionset_load($asnavfor);
    $settings['optionset'] = $asnavfor;
    $settings['current_display'] = 'thumbnail';
    $settings['asnavfor_target'] = "#{$id}-slider";

    // Build the thumbnail+/text navigation Slick.
    $slick[1] = slick_build($build['thumb'], $array, $settings, $array, $thumb_id, $optionset);
    $element = array(
      '#theme'    => 'slick_wrapper',
      '#items'    => $slick,
      '#settings' => $settings,
    );
  }
  else {
    // Views will flatten the array unless we add a key 0, useful for more work.
    $element = $view && !empty($settings['markup']) ? $slick : $slick[0];
  }
  unset($build, $optionset, $settings, $slick);
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function slick_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  form_load_include($form_state, 'inc', 'slick_fields', 'includes/slick_fields.formatters.admin');

  $elements = _slick_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function slick_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  module_load_include('inc', 'slick', 'includes/slick.admin');

  $summary = slick_get_admin_summary($field, $instance, $view_mode, 'slick_fields');
  return implode('<br />', $summary);
}

/**
 * Implements hook_entity_info_alter().
 */
function slick_fields_entity_info_alter(&$entity_info) {
  foreach ($entity_info as $key => $entity) {
    if (in_array($key, array('file', 'field_collection_item')) && !isset($entity_info[$key]['view modes']['slick_carousel'])) {
      $entity_info[$key]['view modes']['slick_carousel'] = array(
        'label' => t('Slick carousel'),
        'custom settings' => FALSE,
      );
    }
  }
}

/**
 * Defines default field formatter settings to avoid notices.
 */
function slick_get_fields_default_settings() {
  module_load_include('inc', 'slick', 'includes/slick.global');
  $settings = array(
    'color_field'       => '',
    'colorbox_style'    => '',
    'iframe_lazy'       => FALSE,
    'lightbox_ready'    => FALSE,
    'markup'            => FALSE,
    'mousewheel'        => FALSE,
    'nested_slick'      => FALSE,
    'nested_optionset'  => '',
    'nested_style'      => '',
    'picture'           => FALSE,
    'picture_ready'     => FALSE,
    'picture_style'     => '',
    'picture_fallback'  => '',
    'thumbnail_style'   => '',
    'thumbnail_hover'   => FALSE,
    'type'              => '',
    'use_ajax'          => FALSE,
  ) + slick_get_global_default_settings();

  drupal_alter('slick_fields_default_settings_info', $settings);
  return $settings;
}
